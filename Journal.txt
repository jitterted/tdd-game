October 24, 2024 - Thursday
===========================

* Turned out to be nicer to pass in the Game reference (really its enqueue method handle) to Deck's constructor rather than passing it to the draw() method. It makes the test author not have to understand how to properly create an "enqueuer" to make Deck work properly, but tests can still access the generated events via the events "receiver" (aka Accumulator).

* Deck's createForTest() methods getting a bit out of hand, so need to move to a more builder-like or lambda-based configuration mechanism

? Why did the th:href have /css as the base path for game.css: did that work before, or did something else change?



October 23, 2024 - Wednesday
============================

* Set up _TODO_ filter to also find @Disabled tests (or some other way)

* Events should defensively copy any non-Value Objects like `List`

* Added messages to exceptions right away (instead of waiting until "later")

* Are we losing some sense of overall behavior by NOT having a test that is purely Commands + Queries (i.e., tests that don't mention Events at all) -- perhaps as a Use Case-oriented "acceptance test"

NEXT TIME: fix broken DeckTest:newActionCardDeck tests (missing enqueuer? or events?)


October 22, 2024 - Tuesday
==========================

* Decided that moving a card from the deck to the Player's hand is a two-event process (e.g., debit card from deck, credit card to player's hand)

    * Makes applying events easier: we don't have to hand the deck to the Player's `apply()` method, only the event

    * Preserves "conservation of cards" (or consistency of entities) at the Game's aggregate transaction level


+ Next time: implement the Deck Replenish event (command generates the Replenish, and applying Replenish puts the cards in the Draw pile)

    + Then we can go back and finish up the Deck CardDrawn event application (which eventually will cause us to replace drawPile.remove() with drawPile.peek())


October 17, 2024 - Thursday
===========================

* Never enqueue() events during apply(), in fact, can we throw an exception if this happens??

    * i.e., MUST NOT generate NEW events as the result of applying them

* Commands --Generate--> Events and Events --Change--> State, but we ENQUEUE events inside command methods, which does both STORE and APPLY those events


October 16, 2024 - Wednesday
============================

* Got tests passing for player drawing card from deck and finally did a commit

* (Re-)encountered need for isolating shuffling randomness for the deck when replenishing

* Discovered that Deck.view() was incomplete!

* Comments originally from Game.start() trying to figure out events and state change


        // Deck starts with cards: [A..Z]
        // stuff happens, deck now has [Y, Z]
        //  -> DeckReplenishedTo(Y, Z)
        // player.drawToFull(deck)
        //  ->  PlayerDrawFromDeck(gets Y)
        //      PlayerDrawFromDeck(gets Z)
        //      [ran out of cards, so shuffle to replenish] <-- what event here?
        //      PlayerDrawFromDeck(gets A)

        // player has: Y, Z, A
        // deck has B..Z

        // Create new Deck by Shuffling the Discard Pile (Deck = [A..E])
        // Player.drawToFull(deck)
        //  -> deck.draw(), deck.draw(), deck.draw() -> Player = [A, B, C], Deck = [D, E]
        // COMMANDS -> EVENTS:
        // (cmd) Create new Game("Game Name")
        // (evt) GameCreated("Game Name", "handle")

        // (cmd) Player 1 joins
        // (evt) PlayerJoined("1")

        // (cmd) Player 2 joins
        // (evt) PlayerJoined("2")

        // (state) Player1[], Player2[]

        // (cmd) Start Game Command
        // (evt) GameStarted()
        // (evt) ActionCardDeckCreated(A,B,C,D,E)

        // (state) Deck(draw)[](discard)[A,B,C,D,E]

        // ** Player Draw to Full Hand Command
        // ** Player 1 Draw Card from Deck
        // -> DeckReplTo(A..E) // moves (shuffles) discard pile to draw pile
        // -> PlayerDrewCard(1) -> A

        // ** Player 1 Draw Card from Deck
        // -> PlayerDrewCard(1) -> B
        // ** Player 1 Draw Card from Deck
        // -> PlayerDrewCard(1) -> C
        // ** Player 1 Discards "B"
        // -> PlayerDiscards(1, B)
        // ** Player 2 Draw Card from Deck
        // -> PlayerDrewCard(2) -> D
        // ** Player 2 Draw Card from Deck
        // -> PlayerDrewCard(2) -> E

        // ** Player 2 Draw Card from Deck
        // -> DeckReplFromDiscard(B) -> Deck[B]
        // -> PlayerDrewCard(2) -> B



        // REBUILD:
        // --events--          --resulting state--
        // DeckReplTo(A..E)     -> Player1 [], Deck = [A..E]
        // PlayerDrewCard(1)    -> Player1 [A], Deck [B..E][]
        // PlayerDrewCard(1)    -> Player1 [A, B], Deck [C..E][]
        // PlayerDrewCard(1)    -> Player1 [A, B, C], Deck [D..E][]
        // PlayerDiscards(1, B) -> Player1 [A, C], Deck [D..E][B]
        // PlayerDrewCard(2)    -> Player2 [D], Deck [E][]
        // PlayerDrewCard(2)    -> Player2 [D, E], Deck [][]
        // DeckRepl(B)          -> Player1 [A, C], Player 2 [D, E], Deck [B][]
        // PlayerDrewCard(2)    -> Player1 [A, C], Player 2 [D, E, B], Deck [][]

        // next player...
        // Player2.drawToFull(deck)
        //  -> deck.draw() [D], deck.draw() [E], DeckReplenishTo[X, Y, Z] (via command, right before enqueue), deck.draw() [X]
        // Player2.uncommitedEvents() => PD(D), PD(E), REPL(X,Y,Z), PD(X)
        //  (Player2 has D, E, X) (Deck has Y, Z)
        // PlayerDrew(D)
        // PlayerDrew(E)
        // DeckReplenishedTo(X, Y, Z)
        // PlayerDrew(X)

        // REBUILD:
        // DeckReplTo(A..E) -> Deck = [A..E]
        // PlayerDrew(1, A) -> Player1 [A], Deck [B..E]
        // PlayerDrew(1, B) -> Player1 [A, B], Deck [C..E]
        // PlayerDrew(1, C) -> Player1 [A, B, C], Deck [D..E]
        // PlayerDrew(2, D) -> Player2 [D], Deck [E]
        // PlayerDrew(2, E) -> Player2 [E], Deck []
        // DeckReplenishedTo(X, Y, Z) -> Deck [X, Y, Z]
        // PlayerDrew(2, X) -> Player2 [X], Deck [Y, Z]




        // RECONSTITUTE FROM PERSISTENCE
        //  DeckReplenishedTo(Y, Z)
        //  PlayerDrewCard(Y), [applying this does not modify Deck]
        //  PlayerDrewCard(Z),
        //  PlayerDrewCard(A),
        //  DeckReplenishedTo(B..Z)

        // player has: Y, Z, A
        // deck has: B..Z
        // EVENTS: PlayerDrewCard() [applying this asks player to draw card from deck]
        //         PlayerDrewCard(),
        //         -- deck ran out of cards in Draw Pile: shuffle happens --
        //         DeckReplenishedTo(A..Z)
        //         PlayerDrewCard()

October 15, 2024 - Tuesday
==========================

* Recovered most of our context

* Created sequence diagram to document what happens when the "start game" scenario is started, clarifying where the "fresh" events go (a new container each transaction)

* Decided to have Game's apply loop dispatch events specific for Player and Deck directly to each of those entities (instead of sending the events to everyone)

NEXT: get the currently failing test to pass, implement player drawing cards to full hand inside of Game.start(), then refactor to move that behavior into Player


June 13, 2024 - Thursday
========================
* Event-sourcing with entities (like Deck and Player) that are part of the Aggregate, is quite unfamiliar

* It's even worse when combining ES with also be not 100% comfortable with "Nullable Infra Wrappers"

* Spelling out precisely the events that would get generated and then how the reconstitution (rebuild? replay?) happens, both when the player just draws cards from a Deck that has enough, as well as when the Deck has to be replenished via shuffling

* Switch from "reconstitute" to "rebuild" (easier to say and type)


June 5, 2024 - Wednesday
========================

* Shifting my mindset to a more event-sourced approach for storing state instead of mapping an entire object graph to a database. With the events, I don't worry about how to store objects like the Player directly in the database.

* Still struggling with committing more often

* Cody does a good job of summarizing what I've done based on commit messages. I wish it could also look at the code itself and summarize what I've done based on the code.

* Decided that the PlayerId is not really needed, as the Player can be identified by the MemberId in the context of a specific Game. It does mean that I can't have a Member act as multiple Players in a single Game.

* Copy-pasting the code from Blackjack was helpful to move quickly with the event-sourcing, but forgot to copy the code that was handling "fresh events" separately from the events used to reconstitute the Game.

* Keep making the mistake of storing whole object references in the in-memory store (repository), which leads to code that works when I'm able to reference the same object, instead of the realistic case of restoring objects from persistence, and then throwing them away after saving.

* Need to submit a feature request for IntelliJ IDEA to find usages based on a Record's constructor

* Here's a copy for reference of the summary that Cody created based on commit messages:

  *  Refactoring and Preparation for Player Hand: You started by refactoring the PlayerDrewActionCard event to use MemberId instead of PlayerId, as the former is what is received from the outside world. This change also introduced a limitation where a single Member cannot act as multiple Players in a single Game. Additionally, you prepared for the Player to have a "hand" consisting of ActionCard objects.
  *  Game Start and Player Drawing Cards: You implemented the game start functionality, where the game.start() method enqueues the GameStarted event. Furthermore, you added a test to demonstrate that multiple cards of the same type can be added to a player's hand. At this stage, the game start process involves only the first player drawing a single (hard-coded) card, which generates an event for that player.
  *  Player Hand Management: You introduced the concept of a Player's hand, where the Player can keep track of cards added to their hand. This involved creating a new event, PlayerDrewActionCard, but it did not yet change the state of the game.
  *  Event-Sourcing and Persistence: You converted the GameStore from storing Game object references to storing Events (as DTOs) and reconstituting the Game objects from those DTOs. This change more closely emulates real persistence and brings the project closer to that goal. Additionally, you added an EventDto (somewhat generalized) with a test, copied from the Blackjack project.
  *  Join Sequence and Game Start Details: Finally, you updated the join sequence to include more details around starting a game.

May 29, 2024 - Wednesday
========================

* Struggled with CSS to create the layout for the "Your Hand" section of the Game

* Added shuffling of the discard pile to the draw pile in the Deck, using embedded stub a la Nullables

* Lot of thinking about design around UI Components

* Decided (for now) to use POST for sending commands instead of going through the WebSocket

* Added endpoint for the POST to start game

* Decided to rely on the Game's events (via freshEvents) to check for behavior/state change - this currently causes a test to fail, since we didn't clear freshEvents

* Next time need to properly handle GameStore's find so that we can rely on freshEvents to be cleared when loaded
